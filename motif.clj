;; Anything you type in here will be executed
;; immediately with the results shown on the
;; right.

(ns rosalind.core
  (:require [clojure.string :as s]))

(def input (str "GTACTGACTACTGACTACTGACATGCCATACTGACCGCTACTGACTCTAAAAAAGGTACTGACCGGTTACTGACTGTTACTGACACTACTGACTACTGACATACTGACTGGCTTACTGACATTACTGACTACTGACGCCAAGAATACTGACACCTACTGACTTGTACTGACAAATACTGACTACTGACGTTACTGACCTACTGACCGTACTGACTTACTGACTTTACTGACTACTGACTACTGACTAGTACTGACTACTGACATACGTACTGACGTACTGACATTATACTGACGGATGGAGTACTGACTACATGCTACTGACTACTGACTTATGGTACTGAACTACTGACGTACTGACTACTGACTACTGACTACTGACTTTTACTGACTACTGACCAATATTCTTACTGACTGGGAATATACTGACTACTGACTGTCCATTACTGACTACTGACTGAGTACTGACAGTACTGACTGTCAAGCTATACTTGCTGGTATACTGACGTTACTGACCATACTGACATATACTGACGATACTGACGCGTACTGACCTACTGACATGTACTGACTACTGACGTACTGACATACTGACTATACTGACCGTACTGACCTACTGACCCGTACTGACTACTGACGTACTGACGCTACTGACGTTACTGACTACTGACGTGTACTGACTTACTGACTTACTGACTGTACTGACGCGATACTGACCTTACTGACTATACTGACCTACTGACTTACTGACCTACTACTGACCCTCAGGTACTGACTACTGACGATACTGACATACTGACGATTACTGACATGCTACTGACAGCCCACCGCACGGTTACTGACCGTACTGACTCGTACTGACAGGGATACTGACTACTGACATGTACTGACAAGAAGTACTGACGTACTGAC"))
(def needle (str "TACTGACTA"))

(defn occurences [haystack needle xs idx]
  (if (> (count haystack) 0)
    (if (= needle (s/join "" (take (count needle) haystack)))
      (cons idx (occurences (rest haystack) needle xs (+ 1 idx)))
      (cons 0 (occurences (rest haystack) needle xs (+ 1 idx))))
    xs
    ))

(filter #(> % 0) (occurences input needle [] 1))